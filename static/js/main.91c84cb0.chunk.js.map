{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentDescr","handleClick","bind","assertThisInitialized","handleKeyPress","e","target","children","play","setState","id","pads","document","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","pad","value","key","toUpperCase","textContent","click","err","return","react_default","a","createElement","App_Display","display","Pads","keys","App_Credits","React","Component","Credits","Display","memo","pad_btns","map","className","descr","onClick","onKeyPress","name","src","clip","class","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.91c84cb0.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);    \n    this.state = {\n      currentDescr: 'Play it!'\n    }    \n    this.handleClick = this.handleClick.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  \n  handleClick(e){\n    e.target.children[0].play();\n    this.setState({\n      currentDescr: e.target.id\n    });\n  }\n  \n  handleKeyPress(e){\n    const pads = document.querySelectorAll('.drum-pad');    \n    for(let pad of pads) {\n      if(e.key.toUpperCase() === pad.textContent){\n        pad.click();\n      }        \n    }\n  } \n  \n  render() {    \n    return (<div id = \"drum-machine\">\n              <Display display = {this.state.currentDescr}/>\n              <Pads keys = {keys} handleClick = {this.handleClick} handleKeyPress = {this.handleKeyPress}/>\n              <Credits/>\n\n            </div>);\n              }\n            }\n\nconst Credits =(props)=>{\n    return <div id=\"credits\">by Annestezia</div>;\n}\nconst Display =(props)=>{\n    return <div id=\"display\">{props.display}</div>;\n}\n\nconst Pads  = React.memo(function MyComponent(props) {\n  const pad_keys = props.keys;\n  const pad_btns = pad_keys.map((key, id) =>\n    <button className = \"drum-pad\" id = {key.descr} key = {key.descr} onClick={props.handleClick} onKeyPress = {props.handleKeyPress}>{key.name}<audio src = {key.clip} class =\"clip\" id = {key.name}></audio></button>);\n    return <div id = \"pads\">{pad_btns}</div>;  \n}); \n\n\nconst keys = [\n  {name: 'Q', clip: './sounds/Bassdrum-01.wav', descr: 'Bassdrum-01'},\n  {name: 'W', clip: './sounds/Bassdrum-02.wav', descr: 'Bassdrum-02'},\n  {name: 'E', clip: './sounds/kick.wav', descr: 'Kick'},\n  {name: 'A', clip: './sounds/floor-tom.wav', descr: 'Floor Tom'},\n  {name: 'S', clip: './sounds/Hat Closed.wav', descr: 'Hat closed'},\n  {name: 'D', clip: './sounds/hi-hat.wav', descr: 'Hi-hat'},\n  {name: 'Z', clip: './sounds/tapesnare.wav', descr: 'Tape Snare'},\n  {name: 'X', clip: './sounds/clap.wav', descr: 'Clap'},\n  {name: 'C', clip: './sounds/rack-tom.wav', descr: 'Rack Tom'}\n];\n\n\n\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}